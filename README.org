* 1 Nothing but the Truth
- http://www.4clojure.com/problem/1

#+begin_src clojure :results output
(def __ (not false))

(println
  (= __ true))
#+end_src

#+RESULTS:
: true


* 2 Simple Math
- http://www.4clojure.com/problem/2

#+begin_src clojure :results output
(def __ 4)

(println
  (= (- 10 (* 2 3)) __))
#+end_src

#+RESULTS:
: true


* 3 Intro to Strings
- http://www.4clojure.com/problem/3

#+begin_src clojure :results output
(def __ "HELLO WORLD")

(println
  (= __ (.toUpperCase "hello world")))
#+end_src

#+RESULTS:
: true


* 4 Intro to Lists
- http://www.4clojure.com/problem/4

#+begin_src clojure :results output
(println
  (= (list :a :b :c) '(:a :b :c)))
#+end_src

#+RESULTS:
: true


* 5 Lists: conj
- http://www.4clojure.com/problem/5

#+begin_src clojure :results output
(def __ '(1 2 3 4))

(println
  (= __ (conj '(2 3 4) 1))
  (= __ (conj '(3 4) 2 1)))
#+end_src

#+RESULTS:
: true true


* 6 Intro to Vectors
- http://www.4clojure.com/problem/6

#+begin_src clojure :results output
(def __ [:a :b :c])

(println
  (= __ (list :a :b :c) (vec '(:a :b :c)) (vector :a :b :c)))
#+end_src

#+RESULTS:
: true


* 7 Vectors: conj
- http://www.4clojure.com/problem/7

#+begin_src clojure :results output
(def __ [1 2 3 4])

(println
  (= __ (conj [1 2 3] 4))
  (= __ (conj [1 2] 3 4)))
#+end_src

#+RESULTS:
: true true


* 8 Intro to Sets
- http://www.4clojure.com/problem/8

#+begin_src clojure :results output
(def __ #{:a :b :c :d})

(println
  (= __ (set '(:a :a :b :c :c :c :c :d :d)))
  (= __ (clojure.set/union #{:a :b :c} #{:b :c :d})))
#+end_src

#+RESULTS:
: true true


* 9 Sets: conj
- http://www.4clojure.com/problem/9

#+begin_src clojure :results output
(def __ 2)

(println
  (= #{1 2 3 4} (conj #{1 4 3} __)))
#+end_src

#+RESULTS:
: true


* 10 Intro to Maps
- http://www.4clojure.com/problem/10

#+begin_src clojure :results output
(def __ 20)

(println
  (= __ ((hash-map :a 10, :b 20, :c 30) :b))
  (= __ (:b {:a 10, :b 20, :c 30})))
#+end_src

#+RESULTS:
: true true


* 11 Maps: conj
- http://www.4clojure.com/problem/11

#+begin_src clojure :results output
(def __ {:b 2})

(println
  (= {:a 1, :b 2, :c 3} (conj {:a 1} __ [:c 3])))
#+end_src

#+RESULTS:
: true


* 12 Intro to Sequences
- http://www.4clojure.com/problem/12

#+begin_src clojure :results output
(def __ 3)

(println
  (= __ (first '(3 2 1)))
  (= __ (second [2 3 4]))
  (= __ (last (list 1 2 3))))
#+end_src

#+RESULTS:
: true true true


* 13 Sequences: rest
- http://www.4clojure.com/problem/13

#+begin_src clojure :results output
(def __ [20 30 40])

(println
  (= __ (rest [10 20 30 40])))
#+end_src

#+RESULTS:
: true


* 14 Intro to Functions
- http://www.4clojure.com/problem/14

#+begin_src clojure :results output
(def __ 8)

(println
  (= __ ((fn add-five [x] (+ x 5)) 3))
  (= __ ((fn [x] (+ x 5)) 3))
  (= __ (#(+ % 5) 3))
  (= __ ((partial + 5) 3)))
#+end_src

#+RESULTS:
: true true true true


* 15 Double Down
- http://www.4clojure.com/problem/15

#+begin_src clojure :results output
(def __ (partial * 2))

(println
  (= (__ 2) 4)
  (= (__ 3) 6)
  (= (__ 11) 22)
  (= (__ 7) 14))
#+end_src

#+RESULTS:
: true true true true


* 16 Hello World
- http://www.4clojure.com/problem/16

#+begin_src clojure :results output
(def __ (fn [name] (format "Hello, %s!" name)))

(println
  (= (__ "Dave") "Hello, Dave!")
  (= (__ "Jenn") "Hello, Jenn!")
  (= (__ "Rhea") "Hello, Rhea!"))
#+end_src

#+RESULTS:
: true true true


* 17 Sequences: map
- http://www.4clojure.com/problem/17

#+begin_src clojure :results output
(def __ '(6 7 8))

(println
  (= __ (map #(+ % 5) '(1 2 3))))
#+end_src

#+RESULTS:
: true


* 18 Sequences: filter
- http://www.4clojure.com/problem/18

#+begin_src clojure :results output
(def __ '(6 7))

(println
  (= __ (filter #(> % 5) '(3 4 5 6 7))))
#+end_src

#+RESULTS:
: true


* 19 Last Element
- http://www.4clojure.com/problem/19
- Special Restrictions: last

#+begin_src clojure :results output
(def __ (fn [list] (reduce (fn [a b] b) list)))
(def __ #(reduce (fn [a b] b) %))
(def __ #(first (reverse %)))

(println
  (= (__ [1 2 3 4 5]) 5)
  (= (__ '(5 4 3)) 3)
  (= (__ ["b" "c" "d"]) "d"))
#+end_src

#+RESULTS:
: true true true


* 20 Penultimate Element
- http://www.4clojure.com/problem/20
- Write a function which returns the second to last element from a sequence.

#+begin_src clojure :results output
(def __ #(nth (reverse %) 1))

(println
  (= (__ (list 1 2 3 4 5)) 4)
  (= (__ ["a" "b" "c"]) "b")
  (= (__ [[1 2] [3 4]]) [1 2]))
#+end_src

#+RESULTS:
: true true true


* 21 Nth Element
- http://www.4clojure.com/problem/21
- Write a function which returns the Nth element from a sequence.
- Special Restrictions: nth

#+begin_src clojure :results output
(def __ #(if (= 0 %2) (first %1) (recur (rest %1) (dec %2))))

(println
  (= (__ '(4 5 6 7) 2) 6)
  (= (__ [:a :b :c] 0) :a)
  (= (__ [1 2 3 4] 1) 2)
  (= (__ '([1 2] [3 4] [5 6]) 2) [5 6]))
#+end_src

#+RESULTS:
: true true true true


* 22 Count a Sequence
- http://www.4clojure.com/problem/22
- Special Restrictions: count

#+begin_src clojure :results output
(def __ count)
(def __ #(reduce (fn [a b] (+ a 1)) 0 %))
(def __ #(reduce (fn [a b] (inc a)) 0 %))

(println
  (= (__ '(1 2 3 3 1)) 5)
  (= (__ "Hello World") 11)
  (= (__ [[1 2] [3 4] [5 6]]) 3)
  (= (__ '(13)) 1)
  (= (__ '(:a :b :c)) 3))
#+end_src

#+RESULTS:
: true true true true true


* 23 Reverse a Sequence
- http://www.4clojure.com/problem/23
- Special Restrictions: reverse, rseq

#+begin_src clojure :results output
(def __ reverse)

(def __ (fn [a & b]
  (if (= (count a) 0)
    b
    (if (vector? a)
      (recur (pop a) (conj (vec b) (last a)))
      (recur (rest a) (conj b (first a)))))))

(println
  (= (__ [1 2 3 4 5]) [5 4 3 2 1])
  (= (__ (sorted-set 5 7 2 7)) '(7 5 2))
  (= (__ [[1 2][3 4][5 6]]) [[5 6][3 4][1 2]]))
#+end_src

#+RESULTS:
: true true true


* 24 Sum It All Up
- http://www.4clojure.com/problem/24

#+begin_src clojure :results output
(def __ #(reduce + %))

(println
  (= (__ [1 2 3]) 6)
  (= (__ (list 0 -2 5 5)) 8)
  (= (__ #{4 2 1}) 7)
  (= (__ '(0 0 -1)) -1)
  (= (__ '(1 10 3)) 14))
#+end_src

#+RESULTS:
: true true true true true


* 25 Find the odd numbers
- http://www.4clojure.com/problem/25

#+begin_src clojure :results output
(def __ #(filter odd? %))

(println
  (= (__ #{1 2 3 4 5}) '(1 3 5))
  (= (__ [4 2 1 6]) '(1))
  (= (__ [2 2 4 6]) '())
  (= (__ [1 1 1 3]) '(1 1 1 3)))
#+end_src

#+RESULTS:
: true true true true


* 26 Fibonacci Sequence
- http://www.4clojure.com/problem/26

#+begin_src clojure :results output
(def __ (fn [count & coll]
  (if (= count 0)
    (seq coll)
    (if (= coll nil)
      (recur (- count 2) [1 1])
      (recur (- count 1) (conj coll (reduce + (take-last 2 coll))))))))

(def __ (fn [count & coll]
  (if (= count 0)
    (reverse coll)
    (if (= coll nil)
      (recur (- count 2) '(1 1))
      (recur (- count 1) (conj coll (reduce + (take 2 coll))))))))

(println
  (= (__ 3) '(1 1 2))
  (= (__ 6) '(1 1 2 3 5 8))
  (= (__ 8) '(1 1 2 3 5 8 13 21)))
#+end_src

#+RESULTS:
: true true true


* 27 Palindrome Detector
- http://www.4clojure.com/problem/27

#+begin_src clojure :results output
(def __ #(= (reverse %) (seq %)))

(println
  (false? (__ '(1 2 3 4 5)))
  (true? (__ "racecar"))
  (true? (__ [:foo :bar :foo]))
  (true? (__ '(1 1 3 3 1 1)))
  (false? (__ '(:a :b :c))))
#+end_src

#+RESULTS:
: true true true true true


* 28 Flatten a Sequence
- http://www.4clojure.com/problem/28
- Special Restriction: flatten

#+begin_src clojure :results output
(def __ (fn [in & out]
  (if (= (count in) 0)
    (reverse out)
    (if (coll? (first in))
      (recur (apply conj (next in) (reverse (first in))) out)
      (recur (next in) (conj out (first in)))))))

(println
  (= (__ '((1 2) 3 [4 [5 6]])) '(1 2 3 4 5 6))
  (= (__ ["a" ["b"] "c"]) '("a" "b" "c"))
  (= (__ '((((:a))))) '(:a)))
#+end_src

#+RESULTS:
: true true true


* 29 Get the Caps
- http://www.4clojure.com/problem/29

#+begin_src clojure :results output
(def __ #(clojure.string/replace % #"[^A-Z]" ""))

(println
  (= (__ "HeLlO, WoRlD!") "HLOWRD")
  (empty? (__ "nothing"))
  (= (__ "$#A(*&987Zf") "AZ"))
#+end_src

#+RESULTS:
: true true true


* 30 Compress a Sequence
- http://www.4clojure.com/problem/30

#+begin_src clojure :results output
(def __ #(reduce (fn [a b]
           (if (= (last a) b) a (conj a b)
           )) [] %))

(println
  (= (apply str (__ "Leeeeeerrroyyy")) "Leroy")
  (= (__ [1 1 2 3 3 2 2 3]) '(1 2 3 2 3))
  (= (__ [[1 2] [1 2] [3 4] [1 2]]) '([1 2] [3 4] [1 2])))
#+end_src

#+RESULTS:
: true true true
